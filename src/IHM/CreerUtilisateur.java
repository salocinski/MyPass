/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IHM;

import DAO.PersonneDAO;
import Extension.CrypteMdp;
import Extension.GestionDate;
import Extension.IconesPerso;
import Extension.LienHypertexte;
import Metier.Personne;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;

/**
 *
 * @author utilisateur
 */
public class CreerUtilisateur extends javax.swing.JFrame {

	//------------------------- ATTRIBUTS -------------------------//
	private final String iconeAdresseQuitter = "/icones/iconeQuitter.png";
	private final String iconeAdresseRetour = "/icones/iconeRetour.png";
	private final String iconeAdresseValider = "/icones/iconeValider.png";
	//------------------------- ATTRIBUTS -------------------------//
	public CreerUtilisateur()
	{
		initComponents();
		//------------------------- DEFINITION ICONE DE BOUTON -------------------------//
		IconesPerso boutonValider = new IconesPerso();
		boutonValider.iconeBouton(valider, iconeAdresseValider);
		IconesPerso boutonRetour = new IconesPerso();
		boutonRetour.iconeBouton(retour, iconeAdresseRetour);
		IconesPerso boutonQuitter = new IconesPerso();
		boutonQuitter.iconeBouton(quitter, iconeAdresseQuitter);
		
		//------------------------- DEFINITION ICONE DE BOUTON -------------------------//
		
		//------------------------- POSITIONNEMENT FENETRE -------------------------//
			// GESTION AUTO DU POSITIONNEMENT EN CENTRE VERTICAL / HORIZONTAL
		this.setLocationRelativeTo(this);
		//------------------------- POSITIONNEMENT FENETRE -------------------------//
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titre = new javax.swing.JLabel();
        labelPrenom = new javax.swing.JLabel();
        saisiePrenom = new javax.swing.JTextField();
        valider = new javax.swing.JButton();
        retour = new javax.swing.JButton();
        quitter = new javax.swing.JButton();
        lien = new javax.swing.JLabel();
        labelNom = new javax.swing.JLabel();
        saisieNom = new javax.swing.JTextField();
        labelDate = new javax.swing.JLabel();
        saisieDateNaissance = new javax.swing.JTextField();
        exempleDate = new javax.swing.JLabel();
        saisiePseudo = new javax.swing.JTextField();
        labelPseudo = new javax.swing.JLabel();
        labelMdp = new javax.swing.JLabel();
        labelVerifMdp = new javax.swing.JLabel();
        saisieMdp = new javax.swing.JPasswordField();
        verifMdp = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 500));
        setResizable(false);

        titre.setFont(new java.awt.Font("Source Sans Pro", 1, 36)); // NOI18N
        titre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titre.setText("Nouvel utilisateur");

        labelPrenom.setText("Prénom :");

        saisiePrenom.setMaximumSize(new java.awt.Dimension(150, 20));
        saisiePrenom.setMinimumSize(new java.awt.Dimension(150, 20));
        saisiePrenom.setPreferredSize(new java.awt.Dimension(150, 20));

        valider.setText("Valider");
        valider.setMaximumSize(new java.awt.Dimension(150, 50));
        valider.setMinimumSize(new java.awt.Dimension(150, 50));
        valider.setPreferredSize(new java.awt.Dimension(150, 50));
        valider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerActionPerformed(evt);
            }
        });

        retour.setText("Retour");
        retour.setMaximumSize(new java.awt.Dimension(150, 50));
        retour.setMinimumSize(new java.awt.Dimension(150, 50));
        retour.setPreferredSize(new java.awt.Dimension(150, 50));
        retour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retourActionPerformed(evt);
            }
        });

        quitter.setText("Quitter");
        quitter.setMaximumSize(new java.awt.Dimension(150, 50));
        quitter.setMinimumSize(new java.awt.Dimension(150, 50));
        quitter.setPreferredSize(new java.awt.Dimension(150, 50));
        quitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterActionPerformed(evt);
            }
        });

        lien.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lien.setText("Programmé par STRYJEWSKI NICOLAS");
        lien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lienMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lienMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lienMouseExited(evt);
            }
        });

        labelNom.setText("Nom :");

        saisieNom.setMaximumSize(new java.awt.Dimension(150, 20));
        saisieNom.setMinimumSize(new java.awt.Dimension(150, 20));
        saisieNom.setPreferredSize(new java.awt.Dimension(150, 20));

        labelDate.setText("Date de naissance :");

        saisieDateNaissance.setMaximumSize(new java.awt.Dimension(150, 20));
        saisieDateNaissance.setMinimumSize(new java.awt.Dimension(150, 20));
        saisieDateNaissance.setPreferredSize(new java.awt.Dimension(150, 20));

        exempleDate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        exempleDate.setText("(Format : JJ/MM/AAAA)");

        saisiePseudo.setMaximumSize(new java.awt.Dimension(150, 20));
        saisiePseudo.setMinimumSize(new java.awt.Dimension(150, 20));
        saisiePseudo.setPreferredSize(new java.awt.Dimension(150, 20));

        labelPseudo.setText("Pseudo :");

        labelMdp.setText("Tapez votre mot de passe :");

        labelVerifMdp.setText("Vérification du mot de passe :");

        saisieMdp.setMaximumSize(new java.awt.Dimension(150, 20));
        saisieMdp.setMinimumSize(new java.awt.Dimension(150, 20));
        saisieMdp.setPreferredSize(new java.awt.Dimension(150, 20));

        verifMdp.setMaximumSize(new java.awt.Dimension(150, 20));
        verifMdp.setMinimumSize(new java.awt.Dimension(150, 20));
        verifMdp.setPreferredSize(new java.awt.Dimension(150, 20));
        verifMdp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                verifMdpKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(retour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(quitter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(lien, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(valider, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(verifMdp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelVerifMdp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(saisieMdp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelPseudo)
                                .addComponent(labelNom)
                                .addComponent(labelDate)
                                .addComponent(labelPrenom))
                            .addGap(193, 193, 193))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(saisiePseudo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saisiePrenom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saisieNom, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(saisieDateNaissance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exempleDate)))
                    .addComponent(labelMdp))
                .addContainerGap(168, Short.MAX_VALUE))
            .addComponent(titre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {quitter, retour, valider});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(titre, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelPseudo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saisiePseudo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelPrenom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saisiePrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelNom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saisieNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saisieDateNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exempleDate))
                .addGap(18, 18, 18)
                .addComponent(labelMdp)
                .addGap(13, 13, 13)
                .addComponent(saisieMdp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(labelVerifMdp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verifMdp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(valider, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(retour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quitter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lien))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
	//------------------------- GESTION EVENEMENTS -------------------------//
    private void retourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retourActionPerformed
        Accueil retour = new Accueil();
		retour.setVisible(true);
		this.dispose();
    }//GEN-LAST:event_retourActionPerformed

    private void quitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitterActionPerformed

    private void validerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerActionPerformed
		//------------------------- DEFINITION DES VALEURS SAISIES DES LABELS -------------------------//
		String pseudo = saisiePseudo.getText();
		
		String prenom = saisiePrenom.getText();
		
        String nom = saisieNom.getText();
		
        String dateNaissance = saisieDateNaissance.getText();
		PersonneDAO personneDao = new PersonneDAO();
		
		char[] mdp = saisieMdp.getPassword();
		String mdpSaisie = new String(mdp);
		
		char[] verifMdpSaisie = verifMdp.getPassword();
		String mdpVerif = new String(verifMdpSaisie);
		
		//On extrait le caractère à l'index 2 et 5 pour vérifier le respect du format (JJ/MM/AAAA)
		char separationJm = dateNaissance.charAt(2);
		char separationMa = dateNaissance.charAt(5);
		//------------------------- DEFINITION DES VALEURS SAISIES DES LABELS -------------------------//
		
		//------------------------- VERIFICATION INTEGRITE DATE -------------------------//
			//recuperation de la date saisie
			String dateSaisieUtilisateur = saisieDateNaissance.getText();
			//separation pour extraction jour/mois/annee
			int jour = Integer.parseInt(dateSaisieUtilisateur.substring(0, 2));
			int mois = Integer.parseInt(dateSaisieUtilisateur.substring(3, 5));
			int annee = Integer.parseInt(dateSaisieUtilisateur.substring(6, 10));
			//gestion date dispose dúne fonction prive testDate qui permet de verifier l'integrite d'une date
			GestionDate date = new GestionDate(jour, mois, annee);
		//------------------------- VERIFICATION INTEGRITE DATE -------------------------//
		
		//------------------------- VERIFICATION UNICITE PSEUDO -------------------------//
		Personne utilisateur;
		PersonneDAO verifPersonneDao = new PersonneDAO();
		utilisateur = verifPersonneDao.chargePersonne(pseudo);
		//------------------------- VERIFICATION UNICITE PSEUDO -------------------------//
			
		//------------------------- GESTION DES ERREURS DE SAISIES DE L'UTILISATEUR -------------------------//
		
			//------------------------- VERIFICATION SAISIE PSEUDO -------------------------//
		if(pseudo.equals(""))
		{
			JOptionPane.showMessageDialog(null, "Le champ PSEUDO est obligatoire. \n Veuillez choisir un nouveau pseudo.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
			saisiePseudo.setBorder(BorderFactory.createLineBorder(Color.RED));
		}
		else if (utilisateur != null)
		{
			JOptionPane.showMessageDialog(null, "Ce pseudo a déjà été selectionné. \n Veuillez choisir un nouveau pseudo.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
			saisiePseudo.setBorder(BorderFactory.createLineBorder(Color.RED));
		}
			//------------------------- VERIFICATION SAISIE PSEUDO -------------------------//
		
			//------------------------- VERIFICATION SAISIE PRENOM -------------------------//
		else if(prenom.equals(""))
		{
			JOptionPane.showMessageDialog(null, "Le champ PRENOM est obligatoire.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
			saisiePrenom.setBorder(BorderFactory.createLineBorder(Color.RED));
		}
			//------------------------- VERIFICATION SAISIE PRENOM -------------------------//
		
			//------------------------- VERIFICATION SAISIE NOM -------------------------//
		else if(nom.equals(""))
		{
			JOptionPane.showMessageDialog(null, "Le champ NOM est obligatoire.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
			saisieNom.setBorder(BorderFactory.createLineBorder(Color.RED));
		}
			//------------------------- VERIFICATION SAISIE NOM -------------------------//
		
			//------------------------- VERIFICATION SAISIE DATE NAISSANCE -------------------------//
		else if(dateNaissance.equals(""))
		{
			JOptionPane.showMessageDialog(null, "Le champ DATE DE NAISSANCE est obligatoire.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
			saisieDateNaissance.setBorder(BorderFactory.createLineBorder(Color.RED));
		}
		//"date.isStatut()" renvoi un booleen pour informer de l'intégrité de la date saisie.
		else if(date.isStatut() == false)
		{
			JOptionPane.showMessageDialog(null, "Le format de date saisie n'est pas reconnue. \n Veuillez saisir la date sous ce format JJ/MM/AAAA \n Exemple : 28/11/1986", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
			saisieDateNaissance.setBorder(BorderFactory.createLineBorder(Color.RED));
		}
		else if (separationJm != '/' && separationMa != '/')
		{			
			JOptionPane.showMessageDialog(null, "Le format de date saisie n'est pas reconnue. \n Veuillez saisir la date sous ce format JJ/MM/AAAA \n Exemple : 28/11/1986", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
			saisieDateNaissance.setBorder(BorderFactory.createLineBorder(Color.RED));
		}
			//------------------------- VERIFICATION SAISIE DATE NAISSANCE -------------------------//
		
			//------------------------- VERIFICATION SAISIE MOT DE PASSE -------------------------//
		else if (!mdpSaisie.equals(mdpVerif))
		{
			JOptionPane.showMessageDialog(null, "Les mots de passe saisies ne correspondent pas. \n Veuillez saisir des informations identiques.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
			saisieMdp.setBorder(BorderFactory.createLineBorder(Color.RED));
			verifMdp.setBorder(BorderFactory.createLineBorder(Color.RED));
		}
			//------------------------- VERIFICATION SAISIE MOT DE PASSE -------------------------//
		
		//------------------------- GESTION DES ERREURS DE SAISIES DE L'UTILISATEUR -------------------------//
		else
		{
			//------------------------- CRYPTAGE DU MOT DE PASSE -------------------------//
			CrypteMdp mdpCrypte = new CrypteMdp(mdpSaisie);
			String valeurMdpCrypte = mdpCrypte.chiffrer();
			//------------------------- CRYPTAGE DU MOT DE PASSE -------------------------//
			
			personneDao.creerPersonne(pseudo, prenom, nom, dateNaissance, valeurMdpCrypte);
			
			//------------------------- REDEFINITION DU TEXTE DES LABELS -------------------------//
			saisiePseudo.setText("");
			saisiePseudo.setBorder(BorderFactory.createLineBorder(Color.BLACK));
			saisiePrenom.setText("");
			saisiePrenom.setBorder(BorderFactory.createLineBorder(Color.BLACK));
			saisieNom.setText("");
			saisieNom.setBorder(BorderFactory.createLineBorder(Color.BLACK));
			saisieDateNaissance.setText("");
			saisieDateNaissance.setBorder(BorderFactory.createLineBorder(Color.BLACK));
			saisieMdp.setText("");
			saisieMdp.setBorder(BorderFactory.createLineBorder(Color.BLACK));
			verifMdp.setText("");
			verifMdp.setBorder(BorderFactory.createLineBorder(Color.BLACK));
			//------------------------- REDEFINITION DU TEXTE DES LABELS -------------------------//
		}
    }//GEN-LAST:event_validerActionPerformed

    private void lienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienMouseClicked
        //Ouverture du navigateur par defaut du systeme + ouverture page definie
		String adresse = "https://www.linkedin.com/in/stryjewskinicolas/";
		LienHypertexte lienlabel = new LienHypertexte();
		lienlabel.ouvertureLien(adresse);
    }//GEN-LAST:event_lienMouseClicked

    private void lienMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienMouseEntered
        //Fonction pour survol de souris
		LienHypertexte lienlabel = new LienHypertexte();
		lien.setEnabled(true);
		lienlabel.souligner(true, lien);
    }//GEN-LAST:event_lienMouseEntered

    private void lienMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienMouseExited
        //Fonction lors de l'arret du survol
		LienHypertexte lienlabel = new LienHypertexte();
		lienlabel.souligner(false, lien);
    }//GEN-LAST:event_lienMouseExited

    private void verifMdpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_verifMdpKeyPressed
        int key = evt.getKeyCode();
		if(key == KeyEvent.VK_ENTER)
		{
			//------------------------- DEFINITION DES VALEURS SAISIES DES LABELS -------------------------//
			String pseudo = saisiePseudo.getText();

			String prenom = saisiePrenom.getText();

			String nom = saisieNom.getText();

			String dateNaissance = saisieDateNaissance.getText();
			PersonneDAO personneDao = new PersonneDAO();

			char[] mdp = saisieMdp.getPassword();
			String mdpSaisie = new String(mdp);

			char[] verifMdpSaisie = verifMdp.getPassword();
			String mdpVerif = new String(verifMdpSaisie);

			//On extrait le caractère à l'index 2 et 5 pour vérifier le respect du format (JJ/MM/AAAA)
			char separationJm = dateNaissance.charAt(2);
			char separationMa = dateNaissance.charAt(5);
			//------------------------- DEFINITION DES VALEURS SAISIES DES LABELS -------------------------//

			//------------------------- VERIFICATION INTEGRITE DATE -------------------------//
				//recuperation de la date saisie
				String dateSaisieUtilisateur = saisieDateNaissance.getText();
				//separation pour extraction jour/mois/annee
				int jour = Integer.parseInt(dateSaisieUtilisateur.substring(0, 2));
				int mois = Integer.parseInt(dateSaisieUtilisateur.substring(3, 5));
				int annee = Integer.parseInt(dateSaisieUtilisateur.substring(6, 10));
				//gestion date dispose dúne fonction prive testDate qui permet de verifier l'integrite d'une date
				GestionDate date = new GestionDate(jour, mois, annee);
			//------------------------- VERIFICATION INTEGRITE DATE -------------------------//

			//------------------------- VERIFICATION UNICITE PSEUDO -------------------------//
			Personne utilisateur;
			PersonneDAO verifPersonneDao = new PersonneDAO();
			utilisateur = verifPersonneDao.chargePersonne(saisiePseudo.getText());

			//------------------------- VERIFICATION UNICITE PSEUDO -------------------------//

			//------------------------- GESTION DES ERREURS DE SAISIES DE L'UTILISATEUR -------------------------//

				//------------------------- VERIFICATION SAISIE PSEUDO -------------------------//
			if(pseudo.equals(""))
			{
				JOptionPane.showMessageDialog(null, "Le champ PSEUDO est obligatoire. \n Veuillez choisir un nouveau pseudo.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
				saisiePseudo.setBorder(BorderFactory.createLineBorder(Color.RED));
			}
			else if (utilisateur != null)
			{
				JOptionPane.showMessageDialog(null, "Ce pseudo a déjà été selectionné. \n Veuillez choisir un nouveau pseudo.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
				saisiePseudo.setBorder(BorderFactory.createLineBorder(Color.RED));
			}
				//------------------------- VERIFICATION SAISIE PSEUDO -------------------------//

				//------------------------- VERIFICATION SAISIE PRENOM -------------------------//
			else if(prenom.equals(""))
			{
				JOptionPane.showMessageDialog(null, "Le champ PRENOM est obligatoire.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
				saisiePrenom.setBorder(BorderFactory.createLineBorder(Color.RED));
			}
				//------------------------- VERIFICATION SAISIE PRENOM -------------------------//

				//------------------------- VERIFICATION SAISIE NOM -------------------------//
			else if(nom.equals(""))
			{
				JOptionPane.showMessageDialog(null, "Le champ NOM est obligatoire.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
				saisieNom.setBorder(BorderFactory.createLineBorder(Color.RED));
			}
				//------------------------- VERIFICATION SAISIE NOM -------------------------//

				//------------------------- VERIFICATION SAISIE DATE NAISSANCE -------------------------//
			else if(dateNaissance.equals(""))
			{
				JOptionPane.showMessageDialog(null, "Le champ DATE DE NAISSANCE est obligatoire.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
				saisieDateNaissance.setBorder(BorderFactory.createLineBorder(Color.RED));
			}
			//"date.isStatut()" renvoi un booleen pour informer de l'intégrité de la date saisie.
			else if(date.isStatut() == false)
			{
				JOptionPane.showMessageDialog(null, "Le format de date saisie n'est pas reconnue. \n Veuillez saisir la date sous ce format JJ/MM/AAAA \n Exemple : 28/11/1986", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
				saisieDateNaissance.setBorder(BorderFactory.createLineBorder(Color.RED));
			}
			else if (separationJm != '/' && separationMa != '/')
			{			
				JOptionPane.showMessageDialog(null, "Le format de date saisie n'est pas reconnue. \n Veuillez saisir la date sous ce format JJ/MM/AAAA \n Exemple : 28/11/1986", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
				saisieDateNaissance.setBorder(BorderFactory.createLineBorder(Color.RED));
			}
				//------------------------- VERIFICATION SAISIE DATE NAISSANCE -------------------------//

				//------------------------- VERIFICATION SAISIE MOT DE PASSE -------------------------//
			else if (!mdpSaisie.equals(mdpVerif))
			{
				JOptionPane.showMessageDialog(null, "Les mots de passe saisies ne correspondent pas. \n Veuillez saisir des informations identiques.", "Erreur de saisie", JOptionPane.ERROR_MESSAGE);
				saisieMdp.setBorder(BorderFactory.createLineBorder(Color.RED));
				verifMdp.setBorder(BorderFactory.createLineBorder(Color.RED));
			}
				//------------------------- VERIFICATION SAISIE MOT DE PASSE -------------------------//

			//------------------------- GESTION DES ERREURS DE SAISIES DE L'UTILISATEUR -------------------------//
			else
			{
				//------------------------- CRYPTAGE DU MOT DE PASSE -------------------------//
				CrypteMdp mdpCrypte = new CrypteMdp(mdpSaisie);
				String valeurMdpCrypte = mdpCrypte.chiffrer();
				//------------------------- CRYPTAGE DU MOT DE PASSE -------------------------//

				personneDao.creerPersonne(pseudo, prenom, nom, dateNaissance, valeurMdpCrypte);

				//------------------------- REDEFINITION DU TEXTE DES LABELS -------------------------//
				saisiePseudo.setText("");
				saisiePseudo.setBorder(BorderFactory.createLineBorder(Color.BLACK));
				saisiePrenom.setText("");
				saisiePrenom.setBorder(BorderFactory.createLineBorder(Color.BLACK));
				saisieNom.setText("");
				saisieNom.setBorder(BorderFactory.createLineBorder(Color.BLACK));
				saisieDateNaissance.setText("");
				saisieDateNaissance.setBorder(BorderFactory.createLineBorder(Color.BLACK));
				saisieMdp.setText("");
				saisieMdp.setBorder(BorderFactory.createLineBorder(Color.BLACK));
				verifMdp.setText("");
				verifMdp.setBorder(BorderFactory.createLineBorder(Color.BLACK));
				//------------------------- REDEFINITION DU TEXTE DES LABELS -------------------------//
			}
		}
    }//GEN-LAST:event_verifMdpKeyPressed
	//------------------------- GESTION EVENEMENTS -------------------------//
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel exempleDate;
    private javax.swing.JLabel labelDate;
    private javax.swing.JLabel labelMdp;
    private javax.swing.JLabel labelNom;
    private javax.swing.JLabel labelPrenom;
    private javax.swing.JLabel labelPseudo;
    private javax.swing.JLabel labelVerifMdp;
    private javax.swing.JLabel lien;
    private javax.swing.JButton quitter;
    private javax.swing.JButton retour;
    private javax.swing.JTextField saisieDateNaissance;
    private javax.swing.JPasswordField saisieMdp;
    private javax.swing.JTextField saisieNom;
    private javax.swing.JTextField saisiePrenom;
    private javax.swing.JTextField saisiePseudo;
    private javax.swing.JLabel titre;
    private javax.swing.JButton valider;
    private javax.swing.JPasswordField verifMdp;
    // End of variables declaration//GEN-END:variables
}
